"Higher level section"_Intro.html - "LAMMPS WWW Site"_lws - "LAMMPS
Documentation"_ld - "LAMMPS Commands"_lc :c

:link(lws,http://lammps.sandia.gov)
:link(ld,Manual.html)
:link(lc,Commands_all.html)

:line

LAMMPS non-features :h3

LAMMPS is designed to be a fast, parallel engine for molecular
dynamics (MD) simulations.  It provides only a modest amount of
functionality for setting up simulations and analyzing their output.

Specifically, LAMMPS was not conceived and designed for:

being run through a GUI
building molecular systems, or building molecular topologies
assign force-field coefficients automagically
perform sophisticated analysis of your MD simulation
visualize your MD simulation interactively
plot your output data :ul

Although over the years these limitations have been somewhat
reduced through features added to LAMMPS or external tools
that either closely interface with LAMMPS or extend LAMMPS.

Here are suggestions on how to perform these tasks:

[GUI:] LAMMPS can be built as a library and a Python wrapper that wraps
the library interface is provided.  Thus, GUI interfaces can be
written in Python (or C or C++ if desired) that run LAMMPS and
visualize or plot its output.  Examples of this are provided in the
python directory and described on the "Python"_Python_head.html doc
page.  Also, there are several external wrappers or GUI front ends. :ulb,l

[Builder:] Several pre-processing tools are packaged with LAMMPS.  Some
of them convert input files in formats produced by other MD codes such
as CHARMM, AMBER, or Insight into LAMMPS input formats.  Some of them
are simple programs that will build simple molecular systems, such as
linear bead-spring polymer chains.  The moltemplate program is a true
molecular builder that will generate complex molecular models.  See
the "Tools"_Tools.html doc page for details on tools packaged with
LAMMPS.  The "Pre/post processing
page"_http:/lammps.sandia.gov/prepost.html of the LAMMPS website
describes a variety of 3rd party tools for this task.  Furthermore,
some LAMMPS internal commands allow to reconstruct, or selectively add
topology information, as well as provide the option to insert molecule
templates instead of atoms for building bulk molecular systems. :l

[Force-field assignment:] The conversion tools described in the previous
bullet for CHARMM, AMBER, and Insight will also assign force field
coefficients in the LAMMPS format, assuming you provide CHARMM, AMBER,
or BIOVIA (formerly Accelrys) force field files. The tools
"ParmEd"_https://parmed.github.io/ParmEd/html/index.html and
"InterMol"_https://github.com/shirtsgroup/InterMol are particularly
powerful and flexible in converting force field and topology data
between various MD simulation programs.  :l

[Simulation analysis:] If you want to perform analysis on-the-fly as
your simulation runs, see the "compute"_compute.html and
"fix"_fix.html doc pages, which list commands that can be used in a
LAMMPS input script.  Also see the "Modify"_Modify.html doc page for
info on how to add your own analysis code or algorithms to LAMMPS.
For post-processing, LAMMPS output such as "dump file
snapshots"_dump.html can be converted into formats used by other MD or
post-processing codes.  To some degree, that conversion can be done
directly inside of LAMMPS by interfacing to the VMD molfile plugins.
The "rerun"_rerun.html command also allows to do some post-processing
of existing trajectories, and through being able to read a variety
of file formats, this can also be used for analyzing trajectories
from other MD codes.  Some post-processing tools packaged with
LAMMPS will do these conversions.  Scripts provided in the
tools/python directory can extract and massage data in dump files to
make it easier to import into other programs.  See the
"Tools"_Tools.html doc page for details on these various options. :l

[Visualization:] LAMMPS can produce NETPBM, JPG or PNG snapshot images
on-the-fly via its "dump image"_dump_image.html command and pass
them to an external program, "FFmpeg"_https://www.ffmpeg.org to generate
movies from them.  For high-quality, interactive visualization there are
many excellent and free tools available.  See the "Other Codes
page"_http://lammps.sandia.gov/viz.html page of the LAMMPS website for
visualization packages that can use LAMMPS output data. :l

[Plotting:] See the next bullet about Pizza.py as well as the
"Python"_Python_head.html doc page for examples of plotting LAMMPS
output.  Scripts provided with the {python} tool in the tools
directory will extract and massage data in log and dump files to make
it easier to analyze and plot.  See the "Tools"_Tools.html doc page
for more discussion of the various tools. :l

[Pizza.py:] Our group has also written a separate toolkit called
"Pizza.py"_http://pizza.sandia.gov which can do certain kinds of
setup, analysis, plotting, and visualization (via OpenGL) for LAMMPS
simulations.  It thus provides some functionality for several of the
above bullets.  Pizza.py is written in "Python"_http://www.python.org
and is available for download from "this
page"_http://www.cs.sandia.gov/~sjplimp/download.html. :l,ule
